/*
------------------------------------------------------------------------
--
--                   (C) COPYRIGHT 2001-2008 SYNOPSYS INC.
--                             ALL RIGHTS RESERVED
--
--  This software and the associated documentation are confidential and
--  proprietary to Synopsys, Inc.  Your use or disclosure of this software
--  is subject to the terms and conditions of a written license agreement
--  between you, or your company, and Synopsys, Inc.
--
--  The entire notice above must be reproduced on all authorized copies.
--
-- File         : DW_apb_timers_cc_constants.v
-- Version      : $Revision: #41 $
-- Abstract     : Configuration Parameters for DW_apb_timers 
--
------------------------------------------------------------------------
*/

// Description:  APB_DATA_WIDTH: 
//               Width of APB Data Bus to which this component is attached
// DefaultValue: 32
// EnumValues:   8 16 32
`define APB_DATA_WIDTH 32


// Description:  NUM_TIMERS: 
//               Number of Timers to instantiate  
//               in DW_apb_timers.  Up to eight timers can be instantiated.
// DefaultValue: 2
// EnumValues:   1 2 3 4 5 6 7 8
`define NUM_TIMERS 2

//Polarity of interrupt signals generated by DW_apb_timers

// Description:  TIM_INTRPT_PLRITY:
// DefaultValue: Active High
// EnumValues:   0 1
// ValueRange:   {Active Low} {Active High}
`define TIM_INTRPT_PLRITY 1


// Description:  TIM_INTR_IO: 
//               This selects whether this component generates an interrupt output flag for  
//               each timer instantiated or a single interrupt output flag covering all  
//               timers in the component.
// DefaultValue: false
// EnumValues:   0 1
// ValueRange:   false true
`define TIM_INTR_IO 0


// Description:  TIMER_WIDTH_1:  
//               Width of Timer 
//               Timers can be between 8 and 32 bits wide (inclusive).
// DefaultValue: 32
// EnumValues:   8 
//               9 
//               10 
//               11 
//               12 
//               13 
//               14 
//               15 
//               16 
//               17 
//               18 
//               19 
//               20 
//               21 
//               22 
//               23 
//               24 
//               25 
//               26 
//               27 
//               28 
//               29 
//               30 
//               31 
//               32
`define TIMER_WIDTH_1 32


// Description:  TIMER_HAS_TOGGLE_1: 
//               Include an output which toggles each time the counter reloads. 
//               Disabled to zero each time the timer is disabled.
// DefaultValue: false
// EnumValues:   0 1
// ValueRange:   false true
`define TIMER_HAS_TOGGLE_1 0


// Description:  TIM_METASTABLE_1:  
//               Set this parameter to "Present" if you 
//               want metastability flops instantiated on this timer's internal interrupt flag 
//               on the boundary between this timer's clock and the bus clock domain.
// DefaultValue: Absent
// EnumValues:   0 1
// ValueRange:   Absent Present
`define TIM_METASTABLE_1 0


// Description:  TIM_PULSE_EXTD_1:  
//               Pulse Extension Control 
//               If this timer's clock is faster than the system bus clock, you can extend 
//               the internal interrupt flag by up to three timer clock cycles to guarantee 
//               that it is seen in the bus clock domain.  A zero value in this field means 
//               that no pulse extension is to be performed.
// DefaultValue: 0
// EnumValues:   0 1 2 3
`define TIM_PULSE_EXTD_1 0


// Description:  TIM_COHERENCY_1: Adds a bank of registers between 
//               this timer and the APB interface of DW_apb_timers to guarantee that 
//               the timer value read back from this block is coherent - i.e. it does 
//               not reflect ongoing changes in the timer's value which take place while 
//               the read operation is in progress.  Note that including coherency can 
//               dramatically increase the register count of the design. Note also 
//               that coherency will not be implemented if the timer width is less 
//               than or equal to the APB Data Width
// DefaultValue: false
// EnumValues:   0 1
// ValueRange:   false true
`define TIM_COHERENCY_1 0


// Description:  TIMER_WIDTH_2: Width of Timer 
//               Timers can be between 8 and 32 bits wide (inclusive).
// DefaultValue: 32
// EnumValues:   8 
//               9 
//               10 
//               11 
//               12 
//               13 
//               14 
//               15 
//               16 
//               17 
//               18 
//               19 
//               20 
//               21 
//               22 
//               23 
//               24 
//               25 
//               26 
//               27 
//               28 
//               29 
//               30 
//               31 
//               32
`define TIMER_WIDTH_2 32


// Description:  TIMER_HAS_TOGGLE_2: 
//               Include an output which toggles each time the counter reloads. 
//               Disabled to zero each time the timer is disabled.
// DefaultValue: false
// EnumValues:   0 1
// ValueRange:   false true
`define TIMER_HAS_TOGGLE_2 0


// Description:  TIM_METASTABLE_2: Set this parameter to "Present" if you 
//               want metastability flops instantiated on this timer's internal interrupt flag 
//               on the boundary between this timer's clock and the bus clock domain.
// DefaultValue: Absent
// EnumValues:   0 1
// ValueRange:   Absent Present
`define TIM_METASTABLE_2 0


// Description:  TIM_PULSE_EXTD_2: Pulse Extension Control 
//               If this timer's clock is faster than the system bus clock, you can extend 
//               the internal interrupt flag by up to three timer clock cycles to guarantee 
//               that it is seen in the bus clock domain.  A zero value in this field means 
//               that no pulse extension is to be performed.
// DefaultValue: 0
// EnumValues:   0 1 2 3
`define TIM_PULSE_EXTD_2 0


// Description:  TIM_COHERENCY_2: Adds a bank of registers between 
//               this timer and the APB interface of DW_apb_timers to guarantee that 
//               the timer value read back from this block is coherent - i.e. it does 
//               not reflect ongoing changes in the timer's value which take place while 
//               the read operation is in progress.  Note that including coherency can 
//               dramatically increase the register count of the design. Note also 
//               that coherency will not be implemented if the timer width is less 
//               than or equal to the APB Data Width
// DefaultValue: false
// EnumValues:   0 1
// ValueRange:   false true
`define TIM_COHERENCY_2 0


// Description:  TIMER_WIDTH_3: Width of Timer 
//               Timers can be between 8 and 32 bits wide (inclusive).
// DefaultValue: 32
// EnumValues:   8 
//               9 
//               10 
//               11 
//               12 
//               13 
//               14 
//               15 
//               16 
//               17 
//               18 
//               19 
//               20 
//               21 
//               22 
//               23 
//               24 
//               25 
//               26 
//               27 
//               28 
//               29 
//               30 
//               31 
//               32
`define TIMER_WIDTH_3 32


// Description:  TIMER_HAS_TOGGLE_3: 
//               Include an output which toggles each time the counter reloads. 
//               Disabled to zero each time the timer is disabled.
// DefaultValue: false
// EnumValues:   0 1
// ValueRange:   false true
`define TIMER_HAS_TOGGLE_3 0


// Description:  TIM_METASTABLE_3: Set this parameter to "Present" if you 
//               want metastability flops instantiated on this timer's internal interrupt flag 
//               on the boundary between this timer's clock and the bus clock domain.
// DefaultValue: Absent
// EnumValues:   0 1
// ValueRange:   Absent Present
`define TIM_METASTABLE_3 0


// Description:  TIM_PULSE_EXTD_3: Pulse Extension Control 
//               If this timer's clock is faster than the system bus clock, you can extend 
//               the internal interrupt flag by up to three timer clock cycles to guarantee 
//               that it is seen in the bus clock domain.  A zero value in this field means 
//               that no pulse extension is to be performed.
// DefaultValue: 0
// EnumValues:   0 1 2 3
`define TIM_PULSE_EXTD_3 0


// Description:  TIM_COHERENCY_3: Adds a bank of registers between 
//               this timer and the APB interface of DW_apb_timers to guarantee that 
//               the timer value read back from this block is coherent - i.e. it does 
//               not reflect ongoing changes in the timer's value which take place while 
//               the read operation is in progress.  Note that including coherency can 
//               dramatically increase the register count of the design. Note also 
//               that coherency will not be implemented if the timer width is less 
//               than or equal to the APB Data Width
// DefaultValue: false
// EnumValues:   0 1
// ValueRange:   false true
`define TIM_COHERENCY_3 0


// Description:  TIMER_WIDTH_4: Width of Timer 
//               Timers can be between 8 and 32 bits wide (inclusive).
// DefaultValue: 32
// EnumValues:   8 
//               9 
//               10 
//               11 
//               12 
//               13 
//               14 
//               15 
//               16 
//               17 
//               18 
//               19 
//               20 
//               21 
//               22 
//               23 
//               24 
//               25 
//               26 
//               27 
//               28 
//               29 
//               30 
//               31 
//               32
`define TIMER_WIDTH_4 32


// Description:  TIMER_HAS_TOGGLE_4: 
//               Include an output which toggles each time the counter reloads. 
//               Disabled to zero each time the timer is disabled.
// DefaultValue: false
// EnumValues:   0 1
// ValueRange:   false true
`define TIMER_HAS_TOGGLE_4 0


// Description:  TIM_METASTABLE_4: Set this parameter to "Present" if you 
//               want metastability flops instantiated on this timer's internal interrupt flag 
//               on the boundary between this timer's clock and the bus clock domain.
// DefaultValue: Absent
// EnumValues:   0 1
// ValueRange:   Absent Present
`define TIM_METASTABLE_4 0


// Description:  TIM_PULSE_EXTD_4: Pulse Extension Control 
//               If this timer's clock is faster than the system bus clock, you can extend 
//               the internal interrupt flag by up to three timer clock cycles to guarantee 
//               that it is seen in the bus clock domain.  A zero value in this field means 
//               that no pulse extension is to be performed.
// DefaultValue: 0
// EnumValues:   0 1 2 3
`define TIM_PULSE_EXTD_4 0


// Description:  TIM_COHERENCY_4: Adds a bank of registers between 
//               this timer and the APB interface of DW_apb_timers to guarantee that 
//               the timer value read back from this block is coherent - i.e. it does 
//               not reflect ongoing changes in the timer's value which take place while 
//               the read operation is in progress.  Note that including coherency can 
//               dramatically increase the register count of the design. Note also 
//               that coherency will not be implemented if the timer width is less 
//               than or equal to the APB Data Width
// DefaultValue: false
// EnumValues:   0 1
// ValueRange:   false true
`define TIM_COHERENCY_4 0


// Description:  TIMER_WIDTH_5: Width of Timer 
//               Timers can be between 8 and 32 bits wide (inclusive).
// DefaultValue: 32
// EnumValues:   8 
//               9 
//               10 
//               11 
//               12 
//               13 
//               14 
//               15 
//               16 
//               17 
//               18 
//               19 
//               20 
//               21 
//               22 
//               23 
//               24 
//               25 
//               26 
//               27 
//               28 
//               29 
//               30 
//               31 
//               32
`define TIMER_WIDTH_5 32


// Description:  TIMER_HAS_TOGGLE_5: 
//               Include an output which toggles each time the counter reloads. 
//               Disabled to zero each time the timer is disabled.
// DefaultValue: false
// EnumValues:   0 1
// ValueRange:   false true
`define TIMER_HAS_TOGGLE_5 0


// Description:  TIM_METASTABLE_5: Set this parameter to "Present" if you 
//               want metastability flops instantiated on this timer's internal interrupt flag 
//               on the boundary between this timer's clock and the bus clock domain.
// DefaultValue: Absent
// EnumValues:   0 1
// ValueRange:   Absent Present
`define TIM_METASTABLE_5 0


// Description:  TIM_PULSE_EXTD_5: 
//               Pulse Extension Control 
//               If this timer's clock is faster than the system bus clock, you can extend 
//               the internal interrupt flag by up to three timer clock cycles to guarantee 
//               that it is seen in the bus clock domain.  A zero value in this field means 
//               that no pulse extension is to be performed.
// DefaultValue: 0
// EnumValues:   0 1 2 3
`define TIM_PULSE_EXTD_5 0


// Description:  TIM_COHERENCY_5: Adds a bank of registers between 
//               this timer and the APB interface of DW_apb_timers to guarantee that 
//               the timer value read back from this block is coherent - i.e. it does 
//               not reflect ongoing changes in the timer's value which take place while 
//               the read operation is in progress.  Note that including coherency can 
//               dramatically increase the register count of the design. Note also 
//               that coherency will not be implemented if the timer width is less 
//               than or equal to the APB Data Width
// DefaultValue: false
// EnumValues:   0 1
// ValueRange:   false true
`define TIM_COHERENCY_5 0


// Description:  TIMER_WIDTH_6: Width of Timer 
//               Timers can be between 8 and 32 bits wide (inclusive).
// DefaultValue: 32
// EnumValues:   8 
//               9 
//               10 
//               11 
//               12 
//               13 
//               14 
//               15 
//               16 
//               17 
//               18 
//               19 
//               20 
//               21 
//               22 
//               23 
//               24 
//               25 
//               26 
//               27 
//               28 
//               29 
//               30 
//               31 
//               32
`define TIMER_WIDTH_6 32


// Description:  TIMER_HAS_TOGGLE_6: 
//               Include an output which toggles each time the counter reloads. 
//               Disabled to zero each time the timer is disabled.
// DefaultValue: false
// EnumValues:   0 1
// ValueRange:   false true
`define TIMER_HAS_TOGGLE_6 0


// Description:  TIM_METASTABLE_6:  
//               Set this parameter to "Present" if you want metastability flops instantiated  
//               on this timer's internal interrupt flag on the boundary between this timer's  
//               clock and the bus clock domain.
// DefaultValue: Absent
// EnumValues:   0 1
// ValueRange:   Absent Present
`define TIM_METASTABLE_6 0


// Description:  TIM_PULSE_EXTD_6: Pulse Extension Control 
//               If this timer's clock is faster than the system bus clock, you can extend 
//               the internal interrupt flag by up to three timer clock cycles to guarantee 
//               that it is seen in the bus clock domain.  A zero value in this field means 
//               that no pulse extension is to be performed.
// DefaultValue: 0
// EnumValues:   0 1 2 3
`define TIM_PULSE_EXTD_6 0


// Description:  TIM_COHERENCY_6: Adds a bank of registers between 
//               this timer and the APB interface of DW_apb_timers to guarantee that 
//               the timer value read back from this block is coherent - i.e. it does 
//               not reflect ongoing changes in the timer's value which take place while 
//               the read operation is in progress.  Note that including coherency can 
//               dramatically increase the register count of the design. Note also 
//               that coherency will not be implemented if the timer width is less 
//               than or equal to the APB Data Width
// DefaultValue: false
// EnumValues:   0 1
// ValueRange:   false true
`define TIM_COHERENCY_6 0


// Description:  TIMER_WIDTH_7: Width of Timer 
//               Timers can be between 8 and 32 bits wide (inclusive).
// DefaultValue: 32
// EnumValues:   8 
//               9 
//               10 
//               11 
//               12 
//               13 
//               14 
//               15 
//               16 
//               17 
//               18 
//               19 
//               20 
//               21 
//               22 
//               23 
//               24 
//               25 
//               26 
//               27 
//               28 
//               29 
//               30 
//               31 
//               32
`define TIMER_WIDTH_7 32


// Description:  TIMER_HAS_TOGGLE_7: 
//               Include an output which toggles each time the counter reloads. 
//               Disabled to zero each time the timer is disabled.
// DefaultValue: false
// EnumValues:   0 1
// ValueRange:   false true
`define TIMER_HAS_TOGGLE_7 0


// Description:  TIM_METASTABLE_7: Set this parameter to "Present" if you 
//               want metastability flops instantiated on this timer's internal interrupt flag 
//               on the boundary between this timer's clock and the bus clock domain.
// DefaultValue: Absent
// EnumValues:   0 1
// ValueRange:   Absent Present
`define TIM_METASTABLE_7 0


// Description:  TIM_PULSE_EXTD_7: Pulse Extension Control 
//               If this timer's clock is faster than the system bus clock, you can extend 
//               the internal interrupt flag by up to three timer clock cycles to guarantee 
//               that it is seen in the bus clock domain.  A zero value in this field means 
//               that no pulse extension is to be performed.
// DefaultValue: 0
// EnumValues:   0 1 2 3
`define TIM_PULSE_EXTD_7 0


// Description:  TIM_COHERENCY_7: Adds a bank of registers between 
//               this timer and the APB interface of DW_apb_timers to guarantee that 
//               the timer value read back from this block is coherent - i.e. it does 
//               not reflect ongoing changes in the timer's value which take place while 
//               the read operation is in progress.  Note that including coherency can 
//               dramatically increase the register count of the design. Note also 
//               that coherency will not be implemented if the timer width is less 
//               than or equal to the APB Data Width
// DefaultValue: false
// EnumValues:   0 1
// ValueRange:   false true
`define TIM_COHERENCY_7 0


// Description:  TIMER_WIDTH_8: Width of Timer 
//               Timers can be between 8 and 32 bits wide (inclusive).
// DefaultValue: 32
// EnumValues:   8 
//               9 
//               10 
//               11 
//               12 
//               13 
//               14 
//               15 
//               16 
//               17 
//               18 
//               19 
//               20 
//               21 
//               22 
//               23 
//               24 
//               25 
//               26 
//               27 
//               28 
//               29 
//               30 
//               31 
//               32
`define TIMER_WIDTH_8 32


// Description:  TIMER_AS_TOGGLE_8: 
//               Include an output which toggles each time the counter reloads. 
//               Disabled to zero each time the timer is disabled.
// DefaultValue: false
// EnumValues:   0 1
// ValueRange:   false true
`define TIMER_HAS_TOGGLE_8 0


// Description:  TIM_METASTABLE_8: Set this parameter to "Present" if you 
//               want metastability flops instantiated on this timer's internal interrupt flag 
//               on the boundary between this timer's clock and the bus clock domain.
// DefaultValue: Absent
// EnumValues:   0 1
// ValueRange:   Absent Present
`define TIM_METASTABLE_8 0


// Description:  TIM_PULSE_EXTD_8: Pulse Extension Control 
//               If this timer's clock is faster than the system bus clock, you can extend 
//               the internal interrupt flag by up to three timer clock cycles to guarantee 
//               that it is seen in the bus clock domain.  A zero value in this field means 
//               that no pulse extension is to be performed.
// DefaultValue: 0
// EnumValues:   0 1 2 3
`define TIM_PULSE_EXTD_8 0


// Description:  TIM_COHERENCY_8: 
//               Adds a bank of registers between 
//               this timer and the APB interface of DW_apb_timers to guarantee that 
//               the timer value read back from this block is coherent - i.e. it does 
//               not reflect ongoing changes in the timer's value which take place while 
//               the read operation is in progress.  Note that including coherency can 
//               dramatically increase the register count of the design. Note also 
//               that coherency will not be implemented if the timer width is less 
//               than or equal to the APB Data Width
// DefaultValue: false
// EnumValues:   0 1
// ValueRange:   false true
`define TIM_COHERENCY_8 0


`define TIM_ADDR_SLICE_RHS 2


// Description:  TIM_ADDR_SLICE_LHS: MSB of decoded address
// DefaultValue: 7
// MinValue:     -2147483648
// MaxValue:     2147483647
`define TIM_ADDR_SLICE_LHS 7


// Description:  TIM_WDATA_WIDTH: 
//               Width of DW_apb_timers' Write Data Bus. 
//               If the APB Data Bus Width configured above is wider than the widest timer,  
//               this component will have a Write Data Bus Width equal to the width of the 
//               widest timer.  If the APB Data Bus Width is narrower than the widest 
//               timer, the component's Write Data Bus width will equal that of the APB 
//               Data Bus.
// DefaultValue: 32
// MinValue:     8
// MaxValue:     32
`define TIM_WDATA_WIDTH 32


// Description:  TIM_RDATA_WIDTH: 
//               Width of DW_apb_timers' Read Data Bus 
//               This is equal to the component's Write Data Bus width.
// DefaultValue: 32
// MinValue:     8
// MaxValue:     =@APB_DATA_WIDTH
`define TIM_RDATA_WIDTH 32


// Description:  Bits to decode on paddr
// DefaultValue: 32
// MinValue:     -2147483648
// MaxValue:     2147483647
`define MAX_APB_DATA_WIDTH 32


`define TIM_CTL_WIDTH 3


`define TIM_MAX_TIMER_WIDTH 32


`define TIM_MAX_TIMERS_WIDTH 1024


`define TIM_FREE_RUNNING 0


`define TIM_USER_DEFINED 1


`define TIM_MAX_TIMERS 8


`define MAX_CURRVALUE_WIDTH 256


`define TIM2_CV_INDEX 64


`define TIM3_CV_INDEX 96


`define TIM4_CV_INDEX 128


`define TIM5_CV_INDEX 160


`define TIM6_CV_INDEX 192


`define TIM7_CV_INDEX 224


`define TIM8_CV_INDEX 256


// Description:  TIM_INDIVIDUAL: Individual Timer Interrupts used
// DefaultValue: 0
// MinValue:     -2147483648
// MaxValue:     2147483647
`define TIM_INDIVIDUAL 0


// Description:  TIM_COMBINED: Combined (Single) Timer Interrupt used
// DefaultValue: 1
// MinValue:     -2147483648
// MaxValue:     2147483647
`define TIM_COMBINED 1


`define TIMERS_ENCRYPT


// Description:  TIM_VERSION_ID: 
//               Each corekit has a version number. 
//               This is relected in the ascii version number which needs to get translated. 
//               0 => 48 -> 30 
//               1 => 49 -> 31 
//               2 => 50 -> 32 
//               A => 65 -> 41 
//               B => 66 -> 42 
//               C => 67 -> 43 
//                
//               Current Version is 2.02* => 32_30_32_2A
// DefaultValue: 0x3230332a
// MinValue:     0x0
// MaxValue:     0xffffffff
`define TIM_VERSION_ID 32'h3230332a
